Step 1: Add Retrofit Dependency
Add the Retrofit dependency to your project's build.gradle file.
implementation 'com.squareup.retrofit2:retrofit:2.9.0'



Step 2: Define the API Endpoint
Define the endpoint of the API that you want to fetch data from using the @GET annotation, and specify the path of the endpoint. In your case, the endpoint would be:
https://api.dictionaryapi.dev/api/v2/entries/en/{word}
Where {word} is the parameter that you will replace with the word you want to search for.



Step 3: Define the Response Model
Define the model that represents the response you expect to receive from the API using classes and annotations. In your case, you need to create three classes: DictionaryResponse, Phonetic, and Meaning.



Step 4: Define the API Service
Create an interface that defines the methods that will be used to fetch data from the API using annotations. In your case, you need to create a method that accepts a String parameter for the word you want to search for, and returns a Call object that represents the API response.
public interface DictionaryApiService {
    @GET("api/v2/entries/en/{word}")
    Call<List<DictionaryResponse>> getWordData(@Path("word") String word);
}



Step 5: Create the Retrofit Instance
Create an instance of the Retrofit class using the builder pattern, passing in the base URL of the API as a parameter.
Retrofit retrofit = new Retrofit.Builder()
    .baseUrl("https://api.dictionaryapi.dev/")
    .addConverterFactory(GsonConverterFactory.create())
    .build();



Step 6: Create the API Service Instance
Create an instance of the API service using the Retrofit instance, and the interface you defined earlier.
DictionaryApiService apiService = retrofit.create(DictionaryApiService.class);



Step 7: Fetch Data from the API
Create a method to fetch data from the API, and call the getWordData method of the API service instance, passing in the word you want to search for as a parameter. You can use the enqueue method to execute the API request asynchronously, and handle the response using a Callback object.



Step 8: display the fetched data in a fragment
create a method in the fragment that calls the fetchWordData method and updates the view with the fetched data. Here's an example implementation:
public class DictionaryFragment extends Fragment implements OnFetchDataListener {
    private DictionaryApiService apiService;
    private RecyclerView phoneticRecyclerView;
    private RecyclerView meaningRecyclerView;
    private DictionaryAdapter phoneticAdapter;
    private DictionaryAdapter meaningAdapter;

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_dictionary, container, false);
 // Initialize API service
        apiService = RetrofitClientInstance.getRetrofitInstance().create(DictionaryApiService.class);

        // Initialize RecyclerViews
        phoneticRecyclerView = view.findViewById(R.id.phonetic_recycler_view);
        meaningRecyclerView = view.findViewById(R.id.meaning_recycler_view);

        phoneticAdapter = new DictionaryAdapter(getContext());
        meaningAdapter = new DictionaryAdapter(getContext());

        phoneticRecyclerView.setAdapter(phoneticAdapter);
        meaningRecyclerView.setAdapter(meaningAdapter);
 return view;
    }

    private void searchWord(String word) {
        // Call API to fetch data
        apiService.getWordData(word).enqueue(new Callback<List<DictionaryResponse>>() {
            @Override
            public void onResponse(Call<List<DictionaryResponse>> call, Response<List<DictionaryResponse>> response) {
                // Check if API response is successful
                if (response.isSuccessful() && response.body() != null && response.body().size() > 0) {
                    DictionaryApiResponse apiResponse = new DictionaryApiResponse(response.body().get(0));

                    // Update view with fetched data
                    updateView(apiResponse);
                } else {
                    onError("No results found for " + word);
                }
            }

            @Override
            public void onFailure(Call<List<DictionaryResponse>> call, Throwable t) {
            onError(t.getMessage());
                      }
                  });
              }

              private void updateView(DictionaryApiResponse apiResponse) {
                  // Update phonetic RecyclerView
                  List<Phonetic> phonetics = apiResponse.getPhonetics();
                  phoneticAdapter.setDictionaryList(phonetics);
                  phoneticAdapter.notifyDataSetChanged();

                  //OR          phoneticRecyclerView.setAdapter(new PhoneticAdapter(apiResponse.getPhonetics()));
                  //OR           if (!phonetics.isEmpty()) {
                                      phoneticAdapter = new PhoneticAdapter(phonetics);
                                       recyclerViewPhonetic.setAdapter(phoneticAdapter);
                                      recyclerViewPhonetic.setVisibility(View.VISIBLE);
                              }

                  // Update meaning RecyclerView
                  List<Meaning> meanings = apiResponse.getMeanings();
                  List<Definition> definitions = new ArrayList<>();
                  for (Meaning meaning : meanings) {
                      definitions.addAll(meaning.getDefinitions());
                  }
                   meaningAdapter.setDictionaryList(definitions);
                          meaningAdapter.notifyDataSetChanged();
                   //OR         meaningRecyclerView.setAdapter(new DefinitionAdapter(definitions));

                      }

                      @Override
                      public void onFetchData(DictionaryApiResponse apiResponse, String message) {
                          updateView(apiResponse);
                      }

                      @Override
                      public void onError(String message) {
                          Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
                      }
                  }
In this implementation, the onCreateView method initializes the API service, RecyclerViews, and adapters. The searchWord method is called when the user submits a search query, and it calls the getWordData method of the API service to fetch the data for the searched word. The fetched data is then passed to the updateView method, which updates the RecyclerViews with the phonetic and meaning data.

The onFetchData and onError methods of the OnFetchDataListener interface are implemented to handle the API response and errors, respectively. The onFetchData method simply calls the updateView method, and the onError method shows a toast message with the error message.

To view the fetched data in the logcat, you can use the Log class to log the response in the onResponse method of the Callback interface. Here's an example implementation:
public void onResponse(Call<List<DictionaryResponse>> call, Response<List<DictionaryResponse>> response) {
        // Check if API response is successful
        if (response.isSuccessful() && response.body() != null && response.body().size() > 0) {
            DictionaryApiResponse apiResponse = new DictionaryApiResponse(response.body().get(0));

            // Log fetched data
            Log.d("DictionaryFragment", "Phonetics: " + apiResponse.getPhonetics().toString());
            Log.d("DictionaryFragment", "Meanings: " + apiResponse.getMeanings().toString());

            // Update view with fetched data
            updateView(apiResponse);
        } else {
            onError("No results found for " + word);
        }
    }
    In this implementation, the onResponse method logs the fetched data using the Log.d method, with the tag "DictionaryFragment". You can view the logcat in Android Studio by selecting "Logcat" from the bottom panel, and filtering the logs by the tag "DictionaryFragment".

Step 9: To call the fetchWordData method
call it in the onQueryTextSubmit method of the SearchView.OnQueryTextListener interface, which is set on the search view in the activity. Here's an example implementation:
 // Initialize DictionaryFragment
        dictionaryFragment = new DictionaryFragment();
        getSupportFragmentManager().beginTransaction().add(R.id.fragment_container, dictionaryFragment).commit();

        // Initialize SearchView
        SearchView searchView = findViewById(R.id.search_view);
        searchView.setOnQueryTextListener(this);
    }

    @Override
    public boolean onQueryTextSubmit(String query) {
        // Call fetchWordData method in DictionaryFragment
        dictionaryFragment.searchWord(query);
        return true;
    }
    In this implementation, the onCreate method initializes the DictionaryFragment and sets it as the content of the fragment_container view. The onQueryTextSubmit method is called when the user submits a search query, and it calls the searchWord method of the DictionaryFragment to fetch and display the data for the searched word.

